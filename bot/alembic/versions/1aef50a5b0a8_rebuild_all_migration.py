"""rebuild all migration

Revision ID: 1aef50a5b0a8
Revises: 
Create Date: 2025-07-24 09:45:46.449759

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy import text
import geoalchemy2
from geoalchemy2 import Geometry



# revision identifiers, used by Alembic.
revision: str = '1aef50a5b0a8'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('apartment_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='apartments'
    )
    op.create_table('booking_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='public'
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    schema='public'
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('phone_number', sa.String(length=20), nullable=True),
    sa.Column('role_id', sa.Integer(), server_default=sa.text('1'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('tg_user_id', sa.BIGINT(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['public.roles.id'], ondelete='SET DEFAULT'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('phone_number', 'role_id', name='uq_phone_role'),
    sa.UniqueConstraint('tg_user_id', 'role_id', name='uq_tg_user_role'),
    sa.UniqueConstraint('username', 'role_id', name='uq_name_role'),
    schema='public'
    )
    op.create_table('apartments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('address', sa.String(length=255), nullable=False),
    sa.Column('type_id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('floor', sa.Integer(), nullable=True),
    sa.Column('has_elevator', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('has_balcony', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('pets_allowed', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('max_guests', sa.Integer(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('price', sa.Numeric(precision=6, scale=1), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('coordinates', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.CheckConstraint('max_guests > 0', name='check_max_guests_positive'),
    sa.CheckConstraint('price >= 0', name='check_price_non_negative'),
    sa.ForeignKeyConstraint(['owner_id'], ['public.users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['type_id'], ['apartments.apartment_types.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id'),
    schema='apartments'
    )
    #op.create_index('idx_apartments_coordinates', 'apartments', ['coordinates'], unique=False, schema='apartments', postgresql_using='gist')
    op.create_table('sessions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tg_bot_id', sa.BIGINT(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('finished_at', sa.DateTime(), nullable=True),
    sa.Column('last_interaction', sa.DateTime(), nullable=True),
    sa.Column('last_action', sa.Text(), nullable=True),
    sa.Column('location', geoalchemy2.types.Geometry(geometry_type='POINT', srid=4326, from_text='ST_GeomFromEWKT', name='geometry'), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    #op.create_index('idx_sessions_location', 'sessions', ['location'], unique=False, schema='public', postgresql_using='gist')
    op.create_table('images',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('apartment_id', sa.Integer(), nullable=False),
    sa.Column('tg_file_id', sa.Integer(), nullable=False),
    sa.Column('is_main', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['apartment_id'], ['apartments.apartments.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='media'
    )
    op.create_table('bookings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('apartment_id', sa.Integer(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=False),
    sa.Column('guest_count', sa.Integer(), nullable=False),
    sa.Column('total_price', sa.Numeric(precision=8, scale=2), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('comments', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), server_default=sa.text('true'), nullable=False),
    sa.CheckConstraint('guest_count > 0', name='check_guest_count_positive'),
    sa.CheckConstraint('start_date < end_date', name='check_dates_order'),
    sa.CheckConstraint('total_price >= 0', name='check_total_price_non_negative'),
    sa.ForeignKeyConstraint(['apartment_id'], ['apartments.apartments.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['status_id'], ['public.booking_types.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['public.users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    schema='public'
    )
    #op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###

    op.execute(text("CREATE SCHEMA IF NOT EXISTS public"))
    op.execute(text("CREATE SCHEMA IF NOT EXISTS apartments"))
    op.execute(text("CREATE SCHEMA IF NOT EXISTS events"))
    op.execute(text("CREATE SCHEMA IF NOT EXISTS media"))

    op.execute(text("CREATE EXTENSION IF NOT EXISTS postgis"))
    op.execute(text("CREATE EXTENSION IF NOT EXISTS pg_cron"))
    op.execute(text("CREATE EXTENSION IF NOT EXISTS adminpack WITH SCHEMA pg_catalog"))
    op.execute(text("CREATE EXTENSION IF NOT EXISTS pg_stat_statements"))


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    #op.create_table('spatial_ref_sys',
    #sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    #sa.Column('auth_name', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    #sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    #sa.Column('srtext', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    #sa.Column('proj4text', sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    #sa.CheckConstraint('srid > 0 AND srid <= 998999', name=op.f('spatial_ref_sys_srid_check')),
    #sa.PrimaryKeyConstraint('srid', name=op.f('spatial_ref_sys_pkey'))
    #)
    op.drop_table('bookings', schema='public')
    op.drop_table('images', schema='media')
    op.drop_index('idx_sessions_location', table_name='sessions', schema='public', postgresql_using='gist')
    op.drop_table('sessions', schema='public')
    op.drop_index('idx_apartments_coordinates', table_name='apartments', schema='apartments', postgresql_using='gist')
    op.drop_table('apartments', schema='apartments')
    op.drop_table('users', schema='public')
    op.drop_table('roles', schema='public')
    op.drop_table('booking_types', schema='public')
    op.drop_table('apartment_types', schema='apartments')
    # ### end Alembic commands ###
    op.execute(text("DROP SCHEMA IF EXISTS public"))
    op.execute(text("DROP SCHEMA IF EXISTS apartments"))
    op.execute(text("DROP SCHEMA IF EXISTS events"))
    op.execute(text("DROP SCHEMA IF EXISTS media"))

    op.execute(text("DROP EXTENSION IF EXISTS postgis"))
    op.execute(text("DROP EXTENSION IF EXISTS pg_cron"))
    op.execute(text("DROP EXTENSION IF EXISTS adminpack WITH SCHEMA pg_catalog"))
    op.execute(text("DROP EXTENSION IF EXISTS pg_stat_statements"))
