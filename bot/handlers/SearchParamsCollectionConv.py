import datetime
from datetime import date

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InputMediaPhoto,
    KeyboardButton
)
from telegram.ext import (
    ConversationHandler,
    CallbackContext,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import logging
from decimal import Decimal
from db.db_async import get_async_session

from utils.keyboard_builder import build_types_keyboard, build_price_filter_keyboard, build_calendar, CB_NAV, CB_SELECT
from utils.apts_search_session import get_apartments
from utils.booking_navigation_view import booking_apartment_card_full
from utils.booking_complit_view import show_booked_appartment
from utils.escape import safe_html
from utils.request_confirmation import send_booking_request_to_owner
from utils.message_tricks import cleanup_messages, add_message_to_cleanup, send_message, sanitize_message

from db.models.apartment_types import ApartmentType
from db.models.apartments import Apartment
from db.models.search_sessions import SearchSession
from db.models.bookings import Booking
from db.models.booking_types import BookingType
from db.models.sessions import Session

from sqlalchemy import update as sa_update, select 
from sqlalchemy.orm import selectinload



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(SELECTING_CHECKIN, 
 SELECTING_CHECKOUT, 
 APTS_TYPES_SELECTION, 
 PRICE_FILTER_SELECTION,
 GUESTS_NUMBER,
 BOOKING_COMMENT)= range(6)



BOOKING_STATUS_PENDING = 5
BOOKING_STATUS_CONFIRMED = 6

PRICE_MAP = {
    "price_all":        (None, {"text": "–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ü–µ–Ω–µ"}),
    "price_0_3000":     ({"min": 0,    "max": 2999}, {"text": "0 ‚Äì 3000 ‚ÇΩ"}),
    "price_3000_5900":  ({"min": 3000, "max": 5999}, {"text": "3000 ‚Äì 5900 ‚ÇΩ"}),
    "price_6000_plus":  ({"min": 6000, "max": None}, {"text": "6000+ ‚ÇΩ"}),
}

async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤—ã–∑–æ–≤–∞
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.delete()
        target_chat = query.message.chat_id
    else:
        target_chat = update.effective_chat.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data["check_in"] = None
    context.user_data["check_out"] = None
    context.user_data["price_filter"] = None
    context.user_data["chosen_apartment"] = None
    context.user_data["actual_price"] = None
    context.user_data["apartment_type"] = None
    context.user_data["filtered_apartments_ids"] = None
    context.user_data["filtered_apartments"] = None
    context.user_data["new_search_id"] = None
    
    await cleanup_messages(context)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
    msg = await context.bot.send_message(
        chat_id=target_chat,
        text="üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞",
        reply_markup=build_calendar(date.today().year, date.today().month)
    )
    await add_message_to_cleanup(context,msg.chat_id,msg.message_id)
    return SELECTING_CHECKIN


async def calendar_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    query = update.callback_query
    await query.answer()
    data = query.data

    check_in = context.user_data.get("check_in")
    check_out = context.user_data.get("check_out")

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    if data.startswith(CB_NAV):
        _, y, m = data.split(":")
        y, m = int(y), int(m)
        msg = await query.edit_message_reply_markup(
            reply_markup=build_calendar(y, m, check_in, check_out)
        )
        await add_message_to_cleanup(context,msg.chat_id,msg.message_id)
        return SELECTING_CHECKIN if not check_in else SELECTING_CHECKOUT

    # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    if data.startswith(CB_SELECT):
        today = date.today()

        try:
            _, d = data.split(":")
            selected_date = date.fromisoformat(d)
        except Exception as e:
            print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–∑ callback: {data}, {e}")
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)

            return SELECTING_CHECKIN

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å check-in
        if check_in is None:
            # üö´ –ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞ –≤ –ø—Ä–æ—à–ª–æ–º
            if selected_date <= today:
                await query.answer("üö´ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞—è —Å –∑–∞–≤—Ç—Ä–∞", show_alert=True)
                return SELECTING_CHECKIN

            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞
            context.user_data["check_in"] = selected_date

            msg = await query.edit_message_text(
                f"‚úÖ –î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞: {selected_date}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–µ–∑–¥–∞",
                reply_markup=build_calendar(selected_date.year, selected_date.month, check_in=selected_date)
            )
            await add_message_to_cleanup(context,msg.chat_id,msg.message_id)
            return SELECTING_CHECKOUT
        # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ check-in, –ø—Ä–æ–≤–µ—Ä—è–µ–º check-out
        if selected_date <= check_in:
            await query.answer("‚õî –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –∑–∞–µ–∑–¥–∞", show_alert=True)
            return SELECTING_CHECKOUT

        context.user_data["check_out"] = selected_date

        async with get_async_session() as session:
            result = await session.execute(select(ApartmentType).order_by(ApartmentType.id))
            types = [{"id": t.id, "name": t.name} for t in result.scalars().all()]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ user_data
        context.user_data["types"] = types
        context.user_data["selected_types"] = []

        # –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = build_types_keyboard(types, [])
        reply_markup = InlineKeyboardMarkup(keyboard)

        

        msg = await query.edit_message_text(
                f"üî¶ –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–∞–º:\n"
                f"—Å <b>{check_in}</b> –ø–æ <b>{selected_date}</b>\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø. –ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        await add_message_to_cleanup(context,msg.chat_id,msg.message_id)
        return APTS_TYPES_SELECTION


async def handle_apartment_type_multiselection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –ø—Ä–∏ –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–µ —Ç–∏–ø–æ–≤ –∫–≤–∞—Ä—Ç–∏—Ä—ã."""
    query = update.callback_query
    await query.answer()

    data = query.data
    selected = context.user_data.get("selected_types", [])

    # üîπ 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if data == "confirm_types":
        if not selected:
            # ‚ùå –û—à–∏–±–∫–∞ ‚Äî –≤—ã–±–æ—Ä –ø—É—Å—Ç–æ–π
            await query.message.reply_text(
                text="‚ö†Ô∏è –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω.",
                reply_markup=InlineKeyboardMarkup(build_types_keyboard(context.user_data["types"], selected))
            )
            return APTS_TYPES_SELECTION
        
        # ‚úÖ –í—ã–±–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω
        selected_names = [t["name"] for t in context.user_data["types"] if t["id"] in selected]
        keyboard = build_price_filter_keyboard()
        await query.edit_message_text(
            text="‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø—ã: " + ", ".join(selected_names) + "\nüí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        context.user_data["selected_names"] = selected_names

        # ‚¨áÔ∏è –ó–¥–µ—Å—å –≤—ã–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        return PRICE_FILTER_SELECTION   

    # üîπ 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª/—Å–Ω—è–ª –≥–∞–ª–æ—á–∫—É —Å —Ç–∏–ø–∞
    try:
        type_id = int(data.replace("type_", ""))
    except ValueError:
        await query.edit_message_text("–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return APTS_TYPES_SELECTION

    if type_id in selected:
        selected.remove(type_id)
    else:
        selected.append(type_id)

    context.user_data["selected_types"] = selected
    print(f"TRY_SELECTED: {selected}")
    # –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = build_types_keyboard(context.user_data["types"], selected)
    await query.edit_message_text(
        text="‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø(—ã) –∫–≤–∞—Ä—Ç–∏—Ä—ã:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return APTS_TYPES_SELECTION

async def handle_price_filter_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    price_range, meta = PRICE_MAP.get(data, (None, None))
    if meta is None:
        logging.warning("Unknown price filter callback_data: %s", data)
        await query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã.", show_alert=True)
        return

    context.user_data["price_filter"] = price_range
    context.user_data["price_text"] = meta["text"]
    
    check_in = context.user_data.get("check_in")
    check_out = context.user_data.get("check_out")
    selected_names = context.user_data.get("selected_names")

    # ‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –≤—ã–±–æ—Ä
    await query.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –∞—Ä–µ–Ω–¥—É —Å: {check_in} –ø–æ {check_out}\n"
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∏–ø—ã: {', '.join(selected_names)}\n"
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ: {meta["text"]}\n\n"
        "üîç –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–±–æ—Ä—É –∫–≤–∞—Ä—Ç–∏—Ä..."
    )

    # 1Ô∏è‚É£ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä
    apartment_ids = await filter_apartments(update, context)

    if not apartment_ids:
        return ConversationHandler.END

    # 2Ô∏è‚É£ –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∫–∞–∑—É –ø–µ—Ä–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
    await show_filtered_apartments(update, context)   #–≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∫–∞–∑–∞ –∫–∞—Ä—Ç–æ—á–µ–∫


# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def filter_apartments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–≤–∞—Ä—Ç–∏—Ä –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ user_data."""
    tg_user_id = context.user_data.get("tg_user_id")
    session_id = context.user_data.get("session_id")
    type_ids = context.user_data.get("selected_types")
    check_in = context.user_data.get("check_in",date)
    check_out = context.user_data.get("check_out",date)
    price = context.user_data.get("price_filter")

    filters = {
        "type_ids": type_ids,
        "check_in": check_in.isoformat() if hasattr(check_in, "isoformat") else check_in,
        "check_out": check_out.isoformat() if hasattr(check_out, "isoformat") else check_out,
        "price": price
    }
    print(f"DEBUG_DATE_TYPE: {type(check_in)}")
    if not tg_user_id:
        await send_message(update, "–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω user_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ /start")
        return None, None

    # ‚úÖ –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä
    apartment_ids, apartments, new_search = await get_apartments(check_in, check_out, session_id, tg_user_id, filters)

    if not apartment_ids:
        keyboard = [
        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="start_search")]
    ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await send_message(update, "‚ùå –ü–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –¥–∞—Ç—ã",reply_markup=reply_markup)

        return ConversationHandler.END

    # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data.update({
            "filtered_apartments_ids": apartment_ids,
            "filtered_apartments": apartments,
            "new_search_id": new_search.id
        })


    # ‚úÖ –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Å–∫–æ–ª—å–∫–æ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤
    msg = await send_message(update, f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {len(apartment_ids)}")
    await add_message_to_cleanup(context, msg.chat_id, msg.message_id)
    return apartment_ids


async def show_filtered_apartments(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∫–≤–∞—Ä—Ç–∏—Ä—ã (–ø–µ—Ä–≤–∞—è –∏–ª–∏ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏).
    –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ callback_data ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞.
    –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å—é –≥–∞–ª–ª–µ—Ä–µ—é. –ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –≤ –¥–≤—É—Ö –º–µ—Å—Ç–∞—Ö
    """
    query = update.callback_query
    data = query.data if query else None

    # ‚úÖ —Å–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä
    apts = context.user_data.get("filtered_apartments", [])
    if not apts:
        if query:
            msg = await query.edit_message_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –ø—É—Å—Ç.")
            await add_message_to_cleanup(context, msg.chat_id, msg.message_id)
        else:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –ø—É—Å—Ç.")
        return ConversationHandler.END

    # ‚úÖ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å (–ø–æ –∫–Ω–æ–ø–∫–µ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç = 0)
    current_index = 0
    if data and (data.startswith("apt_next_") or data.startswith("apt_prev_")):
        try:
            current_index = int(data.split("_")[-1])
        except (ValueError, IndexError):
            await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END

    # ‚úÖ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    total = len(apts)
    if current_index < 0:
        current_index = 0
    if current_index >= total:
        current_index = total - 1

    current_apartment = apts[current_index]

    # ‚úÖ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    text, media, markup = booking_apartment_card_full(current_apartment, current_index, total=total)

    # ‚úÖ –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    msg_target = query.message if query else update.message

    # ‚úÖ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if query:
        await msg_target.delete()

    # ‚úÖ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç
    if media and len(media) > 1:
        await msg_target.reply_media_group(media)
        sent = await msg_target.reply_text(text, reply_markup=markup, parse_mode="HTML")
    elif media and len(media) == 1:
        sent = await msg_target.reply_photo(media[0].media, caption=text, reply_markup=markup, parse_mode="HTML")
    else:
        sent = await msg_target.reply_text(text, reply_markup=markup, parse_mode="HTML")

    context.user_data["last_filter_apartment_message_id"] = sent.message_id
    context.user_data["last_filter_apartment_chat_id"] = sent.chat_id
    await add_message_to_cleanup(context, sent.chat_id, sent.message_id)

async def ask_guests_number(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        _,apartment_id,price = query.data.split('_')
    except ValueError:
        await query.edit_message_text("–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ.")
        return APTS_TYPES_SELECTION
    
    apartment_id = int(apartment_id)
    price = Decimal(price) 
    
    context.user_data["chosen_apartment"] = apartment_id
    context.user_data["actual_price"] = price

    await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π:")
    return GUESTS_NUMBER

async def handle_guests_number(update: Update, context: ContextTypes.DEFAULT_TYPE):

    try:
        guests_number = int(update.message.text)
        if guests_number <= 0:
            raise ValueError
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (>0):")
        return GUESTS_NUMBER

    context.user_data["guest_count"] = guests_number
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    keyboard = [[KeyboardButton("–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π")]]
    await update.message.reply_text(
        "üïä –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É –¥–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return BOOKING_COMMENT

async def handle_bookings_notion(update: Update, context: ContextTypes.DEFAULT_TYPE):
    comment = update.message.text.strip()
    if not comment or comment.lower() == "–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π":
        comment = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ—Ç"
    else:
        comment = sanitize_message(comment)[:255]
    print(f"[DEBUG] context.user_data: {context.user_data}")
    check_in = context.user_data.get("check_in") 
    check_out = context.user_data.get("check_out")
    price = context.user_data.get("actual_price")
    total = (check_out - check_in).days * price
    msg_id = context.user_data.get("last_filter_apartment_message_id")
    cht_id = context.user_data.get("last_filter_apartment_chat_id")

    async with get_async_session() as session:
        session_id = context.user_data.get("session_id")
        if not session_id:
            # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            new_session = Session(tg_user_id=context.user_data['tg_user_id'], role_id = 1,last_action={"event": "order_started"})
            session.add(new_session)
            await session.flush()  # –ø–æ–ª—É—á–∞–µ–º id –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            session_id = new_session.id
            context.user_data["session_id"] = session_id  # –∫–ª–∞–¥—ë–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç

        booking = Booking(
            tg_user_id = context.user_data['tg_user_id'],
            apartment_id = context.user_data['chosen_apartment'],
            status_id = BOOKING_STATUS_PENDING,
            guest_count = context.user_data['guest_count'],
            total_price = total,
            comments = comment,
            check_in = check_in,
            check_out = check_out
        )
        session.add(booking)
        await session.commit()
        await session.refresh(booking)

        stmt = (
            select(Booking)
            .options(
                selectinload(Booking.apartment)
                .selectinload(Apartment.apartment_type),
                selectinload(Booking.apartment)
                .selectinload(Apartment.images),
                selectinload(Booking.apartment)
                .selectinload(Apartment.owner) 
            )
            .where(Booking.id == booking.id)
        )
        result = await session.execute(stmt)
        booking_full = result.scalar_one()
        print(f"[DEBUG] –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–ª—è booking_id={booking_full.id}")
        await send_booking_request_to_owner(context.bot,booking_full)
        print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

        await update.message.reply_text("‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")
        text, media = show_booked_appartment(booking_full)

    
        msg_ids = []

        if media:
            media_messages = await update.message.reply_media_group(media)
            msg_ids.extend([m.message_id for m in media_messages])

        msg_text = await update.message.reply_text(text, parse_mode="HTML")
        msg_ids.append(msg_text.message_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ ID –≤ session.last_action
        session_obj = await session.get(Session, session_id)
        if session_obj:
            session_obj.last_action = {
                "event": "booking_created_message",
                "message_ids": msg_ids
            }
                
        await session.commit()

        if cht_id and msg_id:
            try:
                await context.bot.delete_message(chat_id=cht_id, message_id=msg_id)
                print(f"[DEBUG] –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π (msg_id={msg_id})")
            except Exception as e:
                print(f"[WARNING] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π: {e}")

        context.user_data["last_filter_apartment_message_id"] = None
        context.user_data["last_filter_apartment_chat_id"] = None

    return ConversationHandler.END



async def show_filtered_apartments_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∞–º–∏).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ.
    –°–µ–π—á–∞—Å —ç—Ç–∞ —Ñ—É–Ω–∫–∏—è –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    query = update.callback_query
    data = query.data if query else None

    apts = context.user_data.get("filtered_apartments", [])
    if not apts:
        await (query.message.edit_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –ø—É—Å—Ç.") if query else update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –ø—É—Å—Ç."))
        return ConversationHandler.END

    new_search_id = context.user_data.get("new_search_id")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å
    current_index = 0
    if data and (data.startswith("apt_next_") or data.startswith("apt_prev_")):
        try:
            current_index = int(data.split("_")[-1])
        except (ValueError, IndexError):
            await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return ConversationHandler.END
    

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    total = len(apts)
    current_index = max(0, min(current_index, total - 1))

    async with get_async_session() as session:
        await session.execute(
            sa_update(SearchSession)
            .where(SearchSession.id == new_search_id)
            .values(current_index=current_index)
        )
        await session.commit()

    apartment = apts[current_index]
    text, media, markup = booking_apartment_card_full(apartment, current_index, total)

    # ‚úÖ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ
    photo = media[0].media if media else None

    # üî• –ï—Å–ª–∏ callback ‚Üí —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if query:
        if photo:
            await query.message.edit_media(
                media=InputMediaPhoto(photo, caption=text, parse_mode="HTML"),
                reply_markup=markup
            )
        else:
            await query.message.edit_text(text, reply_markup=markup, parse_mode="HTML")
        return

    # üî• –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –ø–æ–∫–∞–∑ ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if photo:
        await update.message.reply_photo(photo, caption=text, reply_markup=markup, parse_mode="HTML")
    else:
        await update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")


# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞"""
    await cleanup_messages(context)
    context.user_data.clear()
    await update.message.reply_text("‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω—ë–Ω",reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END
