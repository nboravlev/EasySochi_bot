from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ForceReply
from telegram.ext import ContextTypes, ConversationHandler, ApplicationHandlerStop, CallbackQueryHandler

from utils.logging_config import log_function_call, LogExecutionTime, get_logger

import os

logger = get_logger(__name__)

INFO_TEXTS = {
    "info_booking": {
        "title": "üìÜ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é:*",
        "body": (
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–•–æ—á—É —Å–Ω—è—Ç—å –∂–∏–ª—å—ë';\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º —Ä–æ–±–æ—Ç–∞;\n"
            "3. –ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫;\n"
            "4. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å';\n"
            "5. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞;\n"
            "6. –û–±—â–∞–π—Ç–µ—Å—å —Å –Ω–∏–º –≤ —á–∞—Ç–µ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é;\n"
            "7. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –∏ –∑–∞—Å–µ–ª–µ–Ω–∏—é;\n"
            "8. –í—Å–µ –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è';\n"
            "9. –ò–∑ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —á–∞—Ç —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º;\n"
            "10. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü–æ–º–æ—â—å'."
        )
    },
    "info_object": {
        "title": "üè† *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –æ–±—ä–µ–∫—Ç–∞:*",
        "body": (
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–•–æ—á—É —Å–¥–∞–≤–∞—Ç—å –∂–∏–ª—å—ë';\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º —Ä–æ–±–æ—Ç–∞;\n"
            "3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–æ—Ç–æ –∏ —Ç.–¥.;\n"
            "4. –ü—Ä–∏ –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞ —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞;\n"
            "5. –í–Ω–∏–º–∞–Ω–∏–µ! –í –ø–æ–∏—Å–∫–æ–≤–æ–π –≤—ã–¥–∞—á–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –æ–¥–Ω–æ —Ñ–æ—Ç–æ - –ø–µ—Ä–≤–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ;\n"
            "6. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ;\n"
            "7. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞—à –æ–±—ä–µ–∫—Ç –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ;\n"
            "8. –í —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç–µ –µ–≥–æ;\n"
            "9. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—è–≤–∏—Ç—Å—è —á–∞—Ç —Å –≤–∞–º–∏;\n"
            "10. –ü—Ä–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –æ–ø–ª–∞—Ç–µ –∏ –∑–∞—Å–µ–ª–µ–Ω–∏—é –≤ —á–∞—Ç–µ;\n"
            "11. –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –æ–±—ä–µ–∫—Ç—ã' –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤–∞—à–∏ –æ–±—ä–µ–∫—Ç—ã –∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–∏—Ö –∑–∞—è–≤–∫–∏;\n"
            "12. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–æ (—Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å/—Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ);\n"
            "13. –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏ ‚Äî –Ω–µ –¥–∞—Å—Ç —É–¥–∞–ª–∏—Ç—å, –ø–∏—à–∏—Ç–µ –≤ '–ü–æ–º–æ—â—å';\n"
            "14. –ß—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ –ø–æ–∏—Å–∫–∞ –Ω–∞ –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã ‚Äî —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–π—Ç–µ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –¥–∞—Ç—ã;\n"
            "15. 25 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –±–æ—Ç–∞."
        )
    }
}


def _get_effective_message(update: Update):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç message-–æ–±—ä–µ–∫—Ç, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –ø—Ä–∏—à–ª–æ –ª–∏ —ç—Ç–æ update.message
    –∏–ª–∏ —ç—Ç–æ callback_query (update.callback_query.message).
    """
    if update.message:
        return update.message
    if update.callback_query and update.callback_query.message:
        return update.callback_query.message
    return None


async def info_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Å–ø—Ä–∞–≤–∫–∏. –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ /info, —Ç–∞–∫ –∏ –ø—Ä–∏ callback.
    """
    message = _get_effective_message(update)
    if not message:
        return

    keyboard = [
        [InlineKeyboardButton("üìÜ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="info_booking")],
        [InlineKeyboardButton("üè† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –æ–±—ä–µ–∫—Ç–∞", callback_data="info_object")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await message.reply_text("‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é:", reply_markup=reply_markup)


async def show_info_text(update_or_query: Update, key: str):
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ –∫–ª—é—á—É. –†–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∏ –¥–ª—è callback.
    –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥ –≤ –∏–Ω—Ñ–æ' –∏–º–µ–µ—Ç callback_data='help_menu'.
    """
    data = INFO_TEXTS.get(key)
    if not data:
        return

    text = f"{data['title']}\n\n{data['body']}"
    markup = InlineKeyboardMarkup(
        [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∏–Ω—Ñ–æ", callback_data="info_menu")]]
    )

    message = _get_effective_message(update_or_query)
    if not message:
        return

    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å edit_message_text –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É,
    # –Ω–æ reply_text –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–Ω–∏–≤–µ—Ä—Å–∞–ª–µ–Ω.
    await message.reply_text(text, parse_mode="Markdown", reply_markup=markup)


async def info_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è help_*
    - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ query (query.answer())
    - –≤—ã–∑—ã–≤–∞–µ—Ç show_help_text –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –≤—ã–∑–æ–≤–æ–º help_command
    """
    query = update.callback_query
    if not query:
        return

    await query.answer()  # —É–±–∏—Ä–∞–µ–º "–∫—Ä—É—Ç–∏–ª–∫—É" –≤ UI

    data = query.data or ""
    if data == "info_booking":
        await show_info_text(update, "info_booking")
    elif data == "info_object":
        await show_info_text(update, "info_object")
    elif data == "info_menu":
        await info_command(update, context)
    else:
        return