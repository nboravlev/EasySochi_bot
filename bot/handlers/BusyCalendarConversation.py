import datetime
from datetime import date

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InputMediaPhoto,
    KeyboardButton
)
from telegram.ext import (
    ConversationHandler,
    CallbackContext,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
import logging
from decimal import Decimal
from db.db_async import get_async_session

from utils.keyboard_builder import build_calendar, CB_NAV, CB_SELECT
from utils.escape import safe_html
from utils.message_tricks import add_message_to_cleanup, cleanup_messages

from db.models import Session, Booking


from sqlalchemy import update as sa_update, select 
from sqlalchemy.orm import selectinload



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(HANDLE_PLACEHOLDER_BEGIN,
HANDLE_PLACEHOLDER_END,
COMMIT_PLACEHOLDER)= range(3)

PLACEHOLDER_BOOKING_STATUS = 7

async def placeholder_request_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    apartment_id = int(query.data.split("_")[-1])
    target_chat = query.message.chat_id

    context.user_data["start_date"] = None
    context.user_data["end_date"] = None
    context.user_data["apartment_id"] = apartment_id
    #await cleanup_messages(context)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º
    msg = await context.bot.send_message(
        chat_id = target_chat,
        text="üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=build_calendar(date.today().year, date.today().month)
    )
    await add_message_to_cleanup(context, msg.chat_id, msg.message_id)
    return HANDLE_PLACEHOLDER_BEGIN

async def calendar_callback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
    query = update.callback_query
    await query.answer()
    data = query.data

    start_date = context.user_data.get("start_date")
    end_date = context.user_data.get("end_date")

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    if data.startswith(CB_NAV):
        _, y, m = data.split(":")
        y, m = int(y), int(m)
        msg = await query.edit_message_reply_markup(
            reply_markup=build_calendar(y, m, start_date, end_date)
        )
        await add_message_to_cleanup(context, msg.chat_id, msg.message_id)
        return HANDLE_PLACEHOLDER_BEGIN if not start_date else HANDLE_PLACEHOLDER_END

    # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    if data.startswith(CB_SELECT):
        try:
            _, d = data.split(":")
            selected_date = date.fromisoformat(d)
        except Exception as e:
            print(f"[ERROR] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–∑ callback: {data}, {e}")
            await query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", show_alert=True)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã.")
            return HANDLE_PLACEHOLDER_BEGIN

        # ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å check-in
        if start_date is None:
            # ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞
            context.user_data["start_date"] = selected_date
            await query.edit_message_text(
                f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å: {selected_date}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∞",
                reply_markup=build_calendar(selected_date.year, selected_date.month, check_in=selected_date) #—Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∂–¥–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä —Å –∏–º–µ–Ω–µ–º check_in
            )
            return HANDLE_PLACEHOLDER_END
        # –ï—Å–ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ check-in, –ø—Ä–æ–≤–µ—Ä—è–µ–º check-out
        if selected_date <= start_date:
            await query.answer("‚õî –î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –∑–∞–µ–∑–¥–∞", show_alert=True)
            return HANDLE_PLACEHOLDER_END

        context.user_data["end_date"] = selected_date

                # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="commit_placeholder"),
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data=f"placeholder_{context.user_data['apartment_id']}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        msg = await query.edit_message_text(
            f"üü° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞—Ç—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:\n"
            f"üìÖ {start_date} ‚Üí {selected_date}",
            reply_markup=reply_markup
        )
        await add_message_to_cleanup(context, msg.chat_id, msg.message_id)
        return COMMIT_PLACEHOLDER

async def handle_placeholder_commit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    apartment_id = context.user_data.get("apartment_id")
    start_date = context.user_data.get("start_date")
    end_date = context.user_data.get("end_date")

    if not (apartment_id and start_date and end_date):
        await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–≥–ª—É—à–∫–∏ –Ω–µ–ø–æ–ª–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return HANDLE_PLACEHOLDER_BEGIN

    # ‚úÖ –°–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫—É –≤ –ë–î
    async with get_async_session() as session:
        booking = Booking(
            tg_user_id=user_id,
            apartment_id=apartment_id,
            status_id=PLACEHOLDER_BOOKING_STATUS,
            check_in=start_date,
            check_out=end_date,
            guest_count=7,
            total_price=Decimal("0.00"),
            comments="–ó–∞–≥–ª—É—à–∫–∞ (–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è)",
            is_active=True
        )
        session.add(booking)
        await session.commit()

    # üîÑ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"placeholder_{apartment_id}"),
        InlineKeyboardButton("üîô –í –º–µ–Ω—é", callback_data="back_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    msg = await query.edit_message_text(
        f"üîí –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä—ã #{apartment_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞\n"
        f"üìÖ {start_date} ‚Üí {end_date}",
        reply_markup=reply_markup
    )
    await add_message_to_cleanup(context, msg.chat_id, msg.message_id)

    return ConversationHandler.END

# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):    
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    await cleanup_messages(context)
    context.user_data.clear()
    return ConversationHandler.END
