from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, ReplyKeyboardRemove
from telegram.ext import (
    ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters
)
from sqlalchemy import update as sa_update, select 
from geoalchemy2.shape import from_shape
from shapely.geometry import Point
from datetime import datetime
import logging

from db.db_async import get_async_session
from db.models.users import User
from db.models.sessions import Session
from db.models.roles import Role
from bot.utils.user_session import register_user_and_session

logger = logging.getLogger(__name__)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
CHOOSING_ROLE, ASK_PHONE, ASK_LOCATION = range(3)

# === –†–æ–ª–∏ ===
ROLE_MAP = {
    "üè† –•–æ—á—É –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∂–∏–ª—å—ë": 1,  # tenant
    "üèò –•–æ—á—É —Å–¥–∞–≤–∞—Ç—å –∂–∏–ª—å—ë": 2     # owner
}

# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        keyboard = [[role] for role in ROLE_MAP.keys()]
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return CHOOSING_ROLE
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# === –í—ã–±–æ—Ä —Ä–æ–ª–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        role_text = update.message.text
        if role_text not in ROLE_MAP:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return CHOOSING_ROLE

        role_id = ROLE_MAP[role_text]
        tg_user = update.effective_user
        bot_id = context.bot.id
        print(f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –¢–ì{tg_user}")
        logger.info(f"User {tg_user.id} chose role: {role_id}")
        
        # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é
        user, session, is_new_user = await register_user_and_session(tg_user, bot_id, role_id)
        context.user_data.update({
            "user_id": user.id,
            "session_id": session.id,
            "role_id": role_id,
            "is_new_user": is_new_user,
            "tg_user_id": tg_user.id
        })

        if not user.phone_number:
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å.",
                reply_markup=ReplyKeyboardRemove()
            )
            keyboard = [
                [KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)], 
                ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
            ]
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            )
            return ASK_PHONE
        else:
            await update.message.reply_text(
                "–í–∞—à –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.",
                reply_markup=ReplyKeyboardRemove()
            )
            return await _ask_for_location(update)
            
    except Exception as e:
        logger.error(f"Error in choose_role: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
async def save_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phone = None
        
        if update.message.contact:  
            phone = update.message.contact.phone_number
        elif update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            phone = None
        else:
            await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            return ASK_PHONE

        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–≥ —Å —Å–µ—Å—Å–∏–µ–π
        if phone:
            async with get_async_session() as session:
                await session.execute(
                    sa_update(User)
                    .where(User.id == context.user_data["user_id"])
                    .values(phone_number=phone, updated_at=datetime.utcnow())
                )
                await session.commit()
            
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )

        # ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        return await _ask_for_location(update)
        
    except Exception as e:
        logger.error(f"Error saving phone: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞.")
        return ConversationHandler.END

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ===
async def save_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        is_new_user = context.user_data["is_new_user"]
        session_id = context.user_data["session_id"]
        
        location_saved = False
        
        if update.message.location:
            lat = update.message.location.latitude
            lon = update.message.location.longitude
            point = from_shape(Point(lon, lat), srid=4326)
            
            # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–≥ —Å —Å–µ—Å—Å–∏–µ–π
            async with get_async_session() as session:
                await session.execute(
                    sa_update(Session)
                    .where(Session.id == session_id)
                    .values(location=point, updated_at=datetime.utcnow())
                )
                await session.commit()
            
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
            location_saved = True
            
        elif update.message.text == "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å":
            await update.message.reply_text(
                "–•–æ—Ä–æ—à–æ, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å':")
            return ASK_LOCATION
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_new_user:
            await update.message.reply_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            await update.message.reply_text("üëã –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!")
        
        return await _handle_redirect(update, context)
        
    except Exception as e:
        logger.error(f"Error saving location: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
        return ConversationHandler.END

async def redirect_next(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        role_id = context.user_data["role_id"]

        if role_id == 1:  # tenant
            await update.message.reply_text("üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è –Ω–∞–∂–º–∏—Ç–µ /start_search")
        else:  # owner
            await update.message.reply_text("üè† –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /add_object")
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Error in redirect_next: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return ConversationHandler.END

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def _ask_for_location(update):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    keyboard = [
        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], 
        ["–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"]
    ]
    await update.message.reply_text(
        "–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å':",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return ASK_LOCATION

async def _handle_redirect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞"""
    try:
        role_id = context.user_data["role_id"]

        if role_id == 1:  # tenant
            await update.message.reply_text("üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –∂–∏–ª—å—è –Ω–∞–∂–º–∏—Ç–µ /start_search")
        else:  # owner
            await update.message.reply_text("üè† –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /add_object")
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Error in redirect: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return ConversationHandler.END
# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END