from telegram import ReplyKeyboardMarkup, KeyboardButton, Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ContextTypes, 
    ConversationHandler, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    CallbackQueryHandler
)
from sqlalchemy import update as sa_update, select 
from geoalchemy2.shape import from_shape
from shapely.geometry import Point
from datetime import datetime
import logging
from sqlalchemy.orm import selectinload

from db.db_async import get_async_session

from db.models.users import User
from db.models.sessions import Session
from db.models.roles import Role
from db.models.search_sessions import SearchSession
from db.models.apartments import Apartment
from db.models.bookings import Booking
from db.models.booking_chat import BookingChat

from utils.user_session import register_user_and_session
from utils.owner_objects_request_from_menu import prepare_owner_objects_cards
from utils.renter_bookings_request_from_menu import prepare_renter_bookings_cards
from utils.owner_orders_request_from_menu import prepare_owner_orders_cards

from dotenv import load_dotenv
import os

logger = logging.getLogger(__name__)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è ===
(CHOOSING_ROLE, 
 ASK_PHONE, 
 ASK_LOCATION,
 VIEW_BOOKINGS,
 VIEW_OBJECTS,
 VIEW_ORDERS,
 REPORT_PROBLEM,
 SHOW_HELP
)= range(8)

# === –†–æ–ª–∏ ===
ROLE_MAP = {
    "üè† –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∂–∏–ª—å—ë": 1,  # tenant
    "üèò —Å–¥–∞–≤–∞—Ç—å –∂–∏–ª—å—ë": 2     # owner
}

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ===
EXTRA_ACTIONS = {
    "üìë –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è": VIEW_BOOKINGS,
    "üè¢ –º–æ–∏ –æ–±—ä–µ–∫—Ç—ã": VIEW_OBJECTS,
    "‚ö†Ô∏è –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ": REPORT_PROBLEM,
    "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": SHOW_HELP
}

WELCOME_TEXT = (
"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \n –Ø –ù–∏–∫–æ–ª–∞–π –ë–æ—Ä–∞–≤–ª–µ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å—ã —Å 2023 –≥.\n\n"
"–ß–∞—Ç-–±–æ—Ç EasySochi —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É –∏ –ø–æ–∏—Å–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –°–æ—á–∏, –ö—Ä–∞—Å–Ω–æ–π –ü–æ–ª—è–Ω–µ, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏.\n"
"–ú–æ—è —Ü–µ–ª—å —ç—Ç–æ —Å–æ–∑–¥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¥–æ—Ä–æ–≥–∏–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞–º, –∏ –∑–∞ —Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ–ª–µ–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã.\n"
"–í –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–º—ã—Å–ª–µ, —ç—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥, –∞—Ä–µ–Ω–¥—ã, –ø—Ä–æ–∫–∞—Ç–∞ –∏ —Ç.–ø. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ü–æ–º–æ—â—å"

)

WELCOME_PHOTO_URL = "AgACAgIAAxkBAAInXWiZ1L3ZKAPDkD46a2eTg3lETNBQAALY-TEb3UDQSMUUqvPV6sH4AQADAgADeQADNgQ"  # –±–µ–ª—ã–π
#  AgACAgIAAxkBAAInX2iZ1QTPjfWJ1lPRX4yRoA9m4GwkAALc-TEb3UDQSPIh4FWDh0vUAQADAgADeQADNgQ -—Ç–µ–º–Ω—ã–π
#  AgACAgIAAxkBAAInYWiZ1SknQvl_1rUvLlzty-hAHMMsAALe-TEb3UDQSBOatzVIlUKsAQADAgADeQADNgQ - —Å –õ–µ—Ä–æ–π
# AgACAgIAAxkBAAInXWiZ1L3ZKAPDkD46a2eTg3lETNBQAALY-TEb3UDQSMUUqvPV6sH4AQADAgADeQADNgQ - –±–µ–ª—ã–π
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–æ N –≤ —Ä—è–¥
def chunk_buttons(buttons, n=2):
    return [buttons[i:i+n] for i in range(0, len(buttons), n)]
# === –°—Ç–∞—Ä—Ç ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
        all_buttons = list(ROLE_MAP.keys()) + list(EXTRA_ACTIONS.keys())
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–≤–µ –≤ —Ä—è–¥
        keyboard = chunk_buttons(all_buttons, n=2)
        
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        )

        if update.message:
            await update.message.reply_photo(
                photo=WELCOME_PHOTO_URL,  # –ú–æ–∂–Ω–æ file_id –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                caption=WELCOME_TEXT,
                reply_markup=reply_markup
            )
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_photo(
                photo=WELCOME_PHOTO_URL,
                caption=WELCOME_TEXT,
                reply_markup=reply_markup
            )

        return CHOOSING_ROLE
    except Exception as e:
        logger.error(f"Error in start handler: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END

# === –í—ã–±–æ—Ä —Ä–æ–ª–∏ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
async def choose_role(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_choice = update.message.text
        if user_choice in EXTRA_ACTIONS:
            next_state = EXTRA_ACTIONS[user_choice]
            if next_state == VIEW_BOOKINGS:
                await select_renter_bookings(update, context)
                return VIEW_BOOKINGS
            elif next_state == VIEW_OBJECTS:
                await select_owner_objects(update, context)
                return VIEW_OBJECTS
            elif next_state == REPORT_PROBLEM:
                await update.message.reply_text("‚ö†Ô∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É, –∏ —è –ø–µ—Ä–µ–¥–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return REPORT_PROBLEM
            elif next_state == SHOW_HELP:
                keyboard = [
                    [InlineKeyboardButton("üìÜ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é", callback_data="help_booking")],
                    [InlineKeyboardButton("üè† –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –æ–±—ä–µ–∫—Ç–∞", callback_data="help_object")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "‚ÑπÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å:",
                    reply_markup=reply_markup
                )
                return SHOW_HELP


        
        if user_choice in ROLE_MAP:
            role_id = ROLE_MAP[user_choice]
            tg_user = update.effective_user
            bot_id = context.bot.id
            print(f"—Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ –¢–ì{tg_user}")
            logger.info(f"User {tg_user.id} chose role: {role_id}")

            user, session, is_new_user = await register_user_and_session(tg_user, bot_id, role_id)      
        
        

        # ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é

            context.user_data.update({
                "user_id": user.id,
                "session_id": session.id,
                "role_id": role_id,
                "is_new_user": is_new_user,
                "tg_user_id": tg_user.id
            })

            if not user.phone_number:
                await update.message.reply_text(
                    "–°–ø–∞—Å–∏–±–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–ª—å.",
                    reply_markup=ReplyKeyboardRemove()
                )
                keyboard = [
                    [KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω", request_contact=True)], 
                    ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
                ]
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
                    reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
                )

                return ASK_PHONE
            else:
                await update.message.reply_text(
                    "–í–∞—à –Ω–æ–º–µ—Ä —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ.",
                    reply_markup=ReplyKeyboardRemove()
                )

                return await _ask_for_location(update)
            
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return CHOOSING_ROLE
            
    except Exception as e:
        logger.error(f"Error in choose_role: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ===
async def save_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        phone = None
        
        if update.message.contact:  
            phone = update.message.contact.phone_number
        elif update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            phone = None
        else:
            await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            return ASK_PHONE

        # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–≥ —Å —Å–µ—Å—Å–∏–µ–π
        if phone:
            async with get_async_session() as session:
                await session.execute(
                    sa_update(User)
                    .where(User.id == context.user_data["user_id"])
                    .values(phone_number=phone, updated_at=datetime.utcnow())
                )
                await session.commit()
            
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text(
                "–•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )

        # ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        return await _ask_for_location(update)
        
    except Exception as e:
        logger.error(f"Error saving phone: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞.")
        return ConversationHandler.END

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ ===
async def save_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        is_new_user = context.user_data["is_new_user"]
        session_id = context.user_data["session_id"]
        
        location_saved = False
        
        if update.message.location:
            lat = update.message.location.latitude
            lon = update.message.location.longitude
            point = from_shape(Point(lon, lat), srid=4326)
            
            # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –±–∞–≥ —Å —Å–µ—Å—Å–∏–µ–π
            async with get_async_session() as session:
                await session.execute(
                    sa_update(Session)
                    .where(Session.id == session_id)
                    .values(location=point, updated_at=datetime.utcnow())
                )
                await session.commit()
            
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
            location_saved = True
            
        elif update.message.text == "–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å":
            await update.message.reply_text(
                "–•–æ—Ä–æ—à–æ, –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ: –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å':")
            return ASK_LOCATION
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if is_new_user:
            await update.message.reply_text("üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            await update.message.reply_text("üëã –†–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!")
        
        return await _handle_redirect(update, context)
        
    except Exception as e:
        logger.error(f"Error saving location: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.")
        return ConversationHandler.END



# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def _ask_for_location(update):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    keyboard = [
        [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)], 
        ["–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å"]
    ]
    await update.message.reply_text(
        "–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å':",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    )
    return ASK_LOCATION

from telegram import ReplyKeyboardMarkup, KeyboardButton

from telegram import InlineKeyboardButton, InlineKeyboardMarkup

async def _handle_redirect(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        role_id = context.user_data.get("role_id")

        if not role_id:
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            return ConversationHandler.END

        if role_id == 1:  # tenant
            keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫", callback_data="start_search")]]
            prompt = "üè° –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        elif role_id == 2:  # owner
            keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="add_object")]]
            prompt = "üè† –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            return ConversationHandler.END

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(prompt, reply_markup=reply_markup)

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ redirect: {e}")
        await update.message.reply_text("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
        return ConversationHandler.END

    
#==== –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã ===

async def handle_problem(update: Update, context: ContextTypes.DEFAULT_TYPE):

    ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
    if not ADMIN_CHAT_ID:
        raise ValueError("ADMIN_CHAT_ID is not set in .env")
    try:
        user = update.effective_user
        problem_text = update.message.text.strip() if update.message else ""
        print(f"DEBUG repory_problem sender_id {user.first_name}")
        # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if problem_text.lower() in ("/help", "help"):
            await update.message.reply_text(
                "‚ö†Ô∏è –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é, –∏ —è –ø–µ—Ä–µ–¥–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ REPORT_PROBLEM
            return REPORT_PROBLEM
        else:
            admin_message = (
                f"üö® *–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ*\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: [{user.first_name}](tg://user?id={user.id})\n"
                f"üÜî TG ID: `{user.id}`\n\n"
                f"üìù –ü—Ä–æ–±–ª–µ–º–∞:\n{problem_text}"
            )

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            parse_mode="Markdown"
        )

        # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "–ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."
        )

        # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        all_buttons = list(ROLE_MAP.keys()) + list(EXTRA_ACTIONS.keys())
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–≤–µ –≤ —Ä—è–¥
        keyboard = chunk_buttons(all_buttons, n=2)
        
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        )

        if update.message:
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )
        elif update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup
            )

        return CHOOSING_ROLE

    except Exception as e:
        logger.error(f"Error in handle_problem: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return CHOOSING_ROLE

#==== –ü–æ–∫–∞–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –ª–µ–Ω–¥–ª–æ—Ä–¥—É ===
async def select_owner_objects (update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user_id = update.effective_user.id
    async with get_async_session() as session:
        result_owner = await session.execute(
            select(User).where(User.tg_user_id == tg_user_id, User.role_id == 2)
        )
        owner = result_owner.scalar_one_or_none()
        if not owner:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–ª–∞–¥–µ–ª–µ—Ü.")
            return CHOOSING_ROLE

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
        result_apts = await session.execute(
            select(Apartment).options(selectinload(Apartment.booking))
            .where(Apartment.owner_id == owner.id, Apartment.is_active == True)
        )
        apartments = result_apts.scalars().all()

    if not apartments:
        await update.message.reply_text("üè¢ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return CHOOSING_ROLE
    
    context.user_data["owner_objects"] = apartments
    await send_message(update, f"üîç–ù–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(apartments)}")

    await show_owner_objects(update,context)
    return VIEW_OBJECTS

async def show_owner_objects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

    data = query.data if query else None
    print("üîÅ Callback –ø–æ–ª—É—á–µ–Ω:", data)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ user_data
    apts = context.user_data.get("owner_objects", [])
    if not apts:
        if query:
            await query.edit_message_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –ø—É—Å—Ç.")
        else:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –ø—É—Å—Ç.")
        return CHOOSING_ROLE

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–¥–µ–∫—Å 0
    current_index = 0

    # –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    if data:
        if data.startswith("apt_next_") or data.startswith("apt_prev_"):
            try:
                current_index = int(data.split("_")[-1])
            except (ValueError, IndexError):
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return CHOOSING_ROLE
        elif data.startswith("apt_delete_"):
            try:
                current_apartment = int(data.split("_")[-1])
                tg_user_id = update.effective_user.id
                return await delete_apartment(current_apartment, tg_user_id, update, context)
            except (ValueError, IndexError):
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return CHOOSING_ROLE
        elif data.startswith("goto_"):
            return await select_owner_orders(update, context)
        elif data == "back_menu":
            await start (update, context)
            return 


    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    total = len(apts)
    current_index = max(0, min(current_index, total - 1))

    current_apartment = apts[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    text, markup = prepare_owner_objects_cards(current_apartment, current_index, total)

    if query:
        #await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        try:
            await query.edit_message_text(text, reply_markup=markup, parse_mode="HTML")
        except Exception as e:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
    else:
        await update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")

    return VIEW_OBJECTS    

#=======–ü—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º—Å—è –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –õ–µ–Ω–¥–ª–æ—Ä–¥–∞=======
async def select_owner_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    apartment_id = int(query.data.split("_")[-1])
    async with get_async_session() as session:
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
        stmt = (
            select(Booking)
            .options(
                selectinload(Booking.apartment)
                .selectinload(Apartment.apartment_type),
                selectinload(Booking.apartment)
                .selectinload(Apartment.owner),
                selectinload(Booking.booking_type)
            )
            .where(Booking.apartment_id == apartment_id)
        )
        result = await session.execute(stmt)
        owner_booking_full = result.scalars().all()


    if not owner_booking_full:
        await update.message.reply_text("üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return CHOOSING_ROLE
    
    context.user_data["owner_bookings"] = owner_booking_full
    #await send_message(update, f"ID{apartment_id} üîç–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(owner_booking_full)}")

    await show_owner_orders(update,context)
    
    return VIEW_ORDERS

async def show_owner_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

    data = query.data if query else None
    print("üîÅ Callback –ø–æ–ª—É—á–µ–Ω:", data)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ user_data
    bookings = context.user_data.get("owner_bookings", [])
    if not bookings:
        if query:
            await query.edit_message_text("‚ùå –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.")
        else:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.")
        return CHOOSING_ROLE
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–¥–µ–∫—Å 0
    current_index = 0

    # –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    if data:
        if data.startswith("owner_book_next_") or data.startswith("owner_book_prev_"):
            try:
                current_index = int(data.split("_")[-1])
            except (ValueError, IndexError):
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return CHOOSING_ROLE
        elif data.startswith("back_to_objects"):
            await select_owner_objects (update,context)
            return VIEW_OBJECTS



    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    total = len(bookings)
    current_index = max(0, min(current_index, total - 1))

    current_booking = bookings[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    text, markup = prepare_owner_orders_cards(current_booking, current_index, total)

    if query:
        #await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        try:
            await query.edit_message_text(text, reply_markup=markup, parse_mode="HTML")
        except Exception as e:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
    else:
        await update.message.edit_text(text, reply_markup=markup, parse_mode="HTML")

    return VIEW_ORDERS   

#======–ø–æ–∫–∞–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—É=========
async def select_renter_bookings (update: Update, context: ContextTypes.DEFAULT_TYPE):
    ACTIVE_BOOKING_STATUSES = [5, 6]
    tg_user_id = update.effective_user.id
    async with get_async_session() as session:
        result_renter = await session.execute(
            select(User).where(User.tg_user_id == tg_user_id, User.role_id == 1)
        )
        renter = result_renter.scalar_one_or_none()
        if not renter:
            await update.message.reply_text("‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            return REPORT_PROBLEM

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
        stmt = (
            select(Booking)
            .options(
                selectinload(Booking.apartment)
                .selectinload(Apartment.apartment_type),
                selectinload(Booking.apartment)
                .selectinload(Apartment.owner),
                selectinload(Booking.booking_type)
            )
            .where((Booking.user_id == renter.id)
                &(Booking.status_id.in_(ACTIVE_BOOKING_STATUSES)))
        )
        result = await session.execute(stmt)
        booking_full = result.scalars().all()


    if not booking_full:
        await update.message.reply_text("üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return CHOOSING_ROLE
    
    context.user_data["renter_bookings"] = booking_full
    await send_message(update, f"üîç–ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(booking_full)}")

    await show_renter_bookings(update,context)
    return VIEW_BOOKINGS

async def show_renter_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

    data = query.data if query else None
    print("üîÅ Callback –ø–æ–ª—É—á–µ–Ω:", data)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ user_data
    bookings = context.user_data.get("renter_bookings", [])
    if not bookings:
        if query:
            await query.edit_message_text("‚ùå –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.")
        else:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.")
        return CHOOSING_ROLE

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–¥–µ–∫—Å 0
    current_index = 0

    # –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    if data:
        if data.startswith("book_next_") or data.startswith("book_prev_"):
            try:
                current_index = int(data.split("_")[-1])
            except (ValueError, IndexError):
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return CHOOSING_ROLE


    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    total = len(bookings)
    current_index = max(0, min(current_index, total - 1))

    current_booking = bookings[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    text, markup = prepare_renter_bookings_cards(current_booking, current_index, total)

    if query:
        #await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        try:
            await query.edit_message_text(text, reply_markup=markup, parse_mode="HTML")
        except Exception as e:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
    else:
        await update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")

    return VIEW_BOOKINGS   


async def help_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback

    data = query.data

    buttons = [[InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_menu")]]
    markup = InlineKeyboardMarkup(buttons)

    if data == "help_booking":
        await query.message.reply_text(
            "üìÜ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é:*\n\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–•–æ—á—É —Å–Ω—è—Ç—å –∂–∏–ª—å—ë';\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º —Ä–æ–±–æ—Ç–∞;\n"
            "3. –ù–∞–π–¥–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫;\n"
            "4. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å';\n"
            "5. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞;\n"
            "6. –û–±—â–∞–π—Ç–µ—Å—å —Å –Ω–∏–º –≤ —á–∞—Ç–µ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é;\n"
            "7. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –≤ —á–∞—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –æ–ø–ª–∞—Ç–µ –∏ –∑–∞—Å–µ–ª–µ–Ω–∏—é;\n"
            "8. –í—Å–µ –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è';\n"
            "9. –ò–∑ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ —á–∞—Ç —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π;\n"
            "10. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫—Ç—É—Ç –Ω–µ—Ä–∞–∑—Ä–µ—à–∏–º—ã–µ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ'.",
            parse_mode="Markdown",
            reply_markup=markup
        )
    elif data == "help_object":
        await query.message.reply_text(
            "üè† *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –æ–±—ä–µ–∫—Ç–∞:*\n\n"
            "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–•–æ—á—É —Å–¥–∞–≤–∞—Ç—å –∂–∏–ª—å—ë';\n"
            "2. –°–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º —Ä–æ–±–æ—Ç–∞;\n"
            "3. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –Ω–∞–∑–≤–∞–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ, —Ñ–æ—Ç–æ –∏ —Ç.–¥.;\n"
            "4. –ü—Ä–∏ –≤–≤–æ–¥–µ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É–∫–∞–∑–∞—Ç—å –≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ –∏ –≤—ã–±—Ä–∞—Ç—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–æ–±–æ—Ç–æ–º –≤–∞—Ä–∏–∞—Ç–æ–≤;\n"
            "5. –í –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ;\n"
            "6. –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', –µ—Å–ª–∏ –≤—Å–µ —Ö–æ—Ä–æ—à–æ;\n"
            "7. –ù–∞–∂–º–∏—Ç–µ '–í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ', —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ;\n"
            "8. –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ;\n"
            "9. –í —Ç–µ—á. —Å—É—Ç–æ–∫ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∏—á–∏–Ω—ã;\n"
            "10. –ü–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—è–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø –≤ —á–∞—Ç —Å –≤–∞–º–∏;\n"
            "11. –í –±–æ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã, –ø–æ—ç—Ç–æ–º—É –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã –≤—ã –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç–µ –≥–æ—Å—Ç—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ;\n"
            "12. –í —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –æ–±—ä–µ–∫—Ç—ã' –≤—ã —Å–º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¢–ì –æ–±—ä–µ–∫—Ç—ã;\n"
            "13. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å –∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω–æ–≤–æ;\n"
            "14. –ï—Å–ª–∏ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–æ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ';\n"
            "15. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏–∑ –ø–æ–∏—Å–∫–∞ —Å–≤–æ–π –æ–±—ä–µ–∫—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–π—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —ç—Ç–∏ –¥–∞—Ç—ã —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º;\n"
            "16. 25 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—É–º–º–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ 24 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, —Ä–∞–∑–º–µ—Ä–µ –∫–æ–º–∏—Å—Å–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –æ–ø–ª–∞—Ç–µ."
,
            parse_mode="Markdown",
            reply_markup=markup
        )

    

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===

async def send_message(update: Update, text: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ Message –∏ CallbackQuery)."""
    if update.message:
        await update.message.reply_text(text)
    elif update.callback_query:
        await update.callback_query.message.reply_text(text)     


async def delete_apartment(apartment_id: int, tg_user_id: int, update: Update, context: ContextTypes.DEFAULT_TYPE):
    ACTIVE_BOOKING_STATUSES = [5, 6]
    async with get_async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É —Å –±—É–∫–∏–Ω–≥–∞–º–∏
        result = await session.execute(
            select(Apartment)
            .options(selectinload(Apartment.booking))
            .where(Apartment.id == apartment_id)
        )
        apartment = result.scalar_one_or_none()

        if not apartment:
            await update.callback_query.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return VIEW_OBJECTS

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        has_active = any(b.status_id in ACTIVE_BOOKING_STATUSES for b in apartment.booking)

        if has_active:
            await update.callback_query.message.reply_text(
                "üö´ –ù–∞ –¥–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. "
                "–°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ."
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –û—Ç–ø—Ä–∞–≤–∏—Ç—å, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è"
            )
            return REPORT_PROBLEM

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        await session.execute(
            sa_update(Apartment)
            .where(Apartment.id == apartment_id)
            .values(
                is_active=False,
                updated_at=datetime.utcnow(),
                deleted_by=tg_user_id
            )
        )
        await session.commit()

        await update.callback_query.message.reply_text("‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")


        return VIEW_OBJECTS

# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END