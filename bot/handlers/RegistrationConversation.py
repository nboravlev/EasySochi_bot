from telegram import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    Update, 
    ReplyKeyboardRemove, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
    )
from telegram.ext import (
    ContextTypes, 
    ConversationHandler, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    CallbackQueryHandler
)

from sqlalchemy import update as sa_update, select, desc
from geoalchemy2.shape import from_shape
from shapely.geometry import Point
from datetime import datetime
from sqlalchemy.orm import selectinload

from db.db_async import get_async_session

from db.models.users import User
from db.models.sessions import Session
from db.models.roles import Role
from db.models.search_sessions import SearchSession
from db.models.apartments import Apartment
from db.models.bookings import Booking
from db.models.booking_chat import BookingChat

from utils.user_session import get_user_by_tg_id, create_user, create_session
from utils.owner_objects_request_from_menu import prepare_owner_objects_cards
from utils.renter_bookings_request_from_menu import prepare_renter_bookings_cards
from utils.owner_orders_request_from_menu import prepare_owner_orders_cards
from utils.escape import safe_html

from utils.logging_config import log_function_call, LogExecutionTime, get_logger

from dotenv import load_dotenv
import os

logger = get_logger(__name__)

# === –†–æ–ª–∏ ===
ROLE_MAP = {
    "üè† –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∂–∏–ª—å—ë": 1,      # tenant
    "üèò —Å–¥–∞–≤–∞—Ç—å –∂–∏–ª—å—ë": 2,          # owner
    "üìë –º–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è": 4,      # user personal cabinet
    "üè¢ –º–æ–∏ –æ–±—ä–µ–∫—Ç—ã": 5            # owner personal cabinet
}

WELCOME_PHOTO_URL = "/bot/static/images/welcome.jpg"

WELCOME_TEXT = (
    "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, \n –Ø –ù–∏–∫–æ–ª–∞–π –ë–æ—Ä–∞–≤–ª–µ–≤, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω –∏–∑ –°–æ—á–∏. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å—ã —Å 2023 –≥.\n\n"
    "EasySochi —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É –∏ –ø–æ–∏—Å–∫—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –°–æ—á–∏, –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –∏ –∫–≤–∞—Ä—Ç–∏—Ä–∞–º–∏.\n"
    "–ú–æ—è —Ü–µ–ª—å - —Å–æ–∑–¥–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –¥–æ—Ä–æ–≥–∏–º –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞–º, –∏ –∑–∞ —Å—á–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Ü–µ–Ω—É.\n"
    "–í —à–∏—Ä–æ–∫–æ–º —Å–º—ã—Å–ª–µ, —ç—Ç–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º –≤ —Å—Ñ–µ—Ä–µ —É—Å–ª—É–≥, –∞—Ä–µ–Ω–¥—ã, –ø—Ä–æ–∫–∞—Ç–∞ –∏ —Ç.–ø. –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –¥–ª—è –í–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ —Ä–∞–∑–¥–µ–ª –ü–æ–º–æ—â—å"
)

# Constants for conversation states  
NAME_REQUEST, ASK_PHONE, MAIN_MENU, VIEW_BOOKINGS, VIEW_OBJECTS, VIEW_ORDERS = range(6)


def chunk_buttons(buttons, n=2):
    """Group buttons into rows of n buttons each"""
    return [buttons[i:i+n] for i in range(0, len(buttons), n)]


@log_function_call(action="user_start_command")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Entry point - check if user exists and route accordingly"""
    user_id = update.effective_user.id if update.effective_user else None
    start_logger = get_logger(__name__, user_id=user_id)
    
    try:
        tg_user = update.effective_user
        
        # Check if user already exists
        user = await get_user_by_tg_id(tg_user.id)
        
        if user is None:
            # New user - start registration
            start_logger.info(f"New user {tg_user.id} starting registration")
            return await begin_registration(update, context, tg_user)
        else:
            # Existing user - show main menu
            start_logger.info(f"Existing user {tg_user.id} accessing main menu")
            return await show_main_menu(update, context, user)
            
    except Exception as e:
        start_logger.error(
            f"Error in start handler: {str(e)}",
            extra={
                'action': 'start_error',
                'user_id': user_id,
                'error_type': type(e).__name__
            },
            exc_info=True
        )
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        return ConversationHandler.END


async def begin_registration(update: Update, context: ContextTypes.DEFAULT_TYPE, tg_user):
    """Start registration process for new users"""
    try:
        # Store user data for registration process
        context.user_data.update({
            "tg_user": tg_user,
            "registration_step": "name"
        })
        
        # Send welcome message
        with open(WELCOME_PHOTO_URL, "rb") as f:
            await update.message.reply_photo(
                photo=f,
                caption=f"{WELCOME_TEXT}\n\nüéØ –ï—Å–ª–∏ –≤—ã –≤–ø–µ—Ä–≤—ã–µ —É –Ω–∞—Å, –ø—Ä–æ–π–¥–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
            )
        
        # Ask for first name - with option to use Telegram name
        keyboard = [[KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –∏–∑ –¢–ì")]]
        await update.message.reply_text(
            "–ö–∞–∫ –º—ã –º–æ–∂–µ–º –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∏–∂–µ:",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
        return NAME_REQUEST
        
    except Exception as e:
        logger.error(f"Error in begin_registration: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return ConversationHandler.END
    
async def handle_name_request(update: Update, context: ContextTypes.DEFAULT_TYPE):

    tg_user = context.user_data.get("tg_user")

    first_name = update.message.text.strip()
    if not first_name or first_name.lower() == "–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –∏–∑ —Ç–≥":
        first_name = tg_user.first_name.strip()
    else:
        first_name = safe_html(first_name)

    context.user_data["first_name"] = first_name

    keyboard = [
            [KeyboardButton("üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)],
            ["–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"]
        ]
    await update.message.reply_text(
            f"–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {first_name}!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ "
            "(–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
            reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        )
    
    return ASK_PHONE

async def handle_phone_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle phone number during registration"""
    try:
        phone = None
        
        if update.message.contact:
            phone = update.message.contact.phone_number
        elif update.message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
            phone = None
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':")
            return ASK_PHONE

        # Complete user registration
        tg_user = context.user_data.get("tg_user")
        first_name = context.user_data.get("first_name")
        
        user = await create_user(tg_user, first_name, phone)
        
        await update.message.reply_text(
            f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"{'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.' if phone else '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'}",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # Show main menu
        return await show_main_menu(update, context, user)
        
    except Exception as e:
        logger.error(f"Error in handle_phone_registration: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
        return ConversationHandler.END


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, user):
    """Show main menu with role options"""
    try:
        # Store user data for the session
        context.user_data.update({
            "user_id": user.id,
            "tg_user_id": user.tg_user_id
        })
        
        # Create menu buttons
        all_buttons = list(ROLE_MAP.keys())
        keyboard = chunk_buttons(all_buttons, n=2)
        
        reply_markup = ReplyKeyboardMarkup(
            keyboard,
            one_time_keyboard=True,
            resize_keyboard=True
        )
        
        welcome_back_msg = f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.firstname or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if hasattr(update, 'message') and update.message:
            await update.message.reply_text(welcome_back_msg, reply_markup=reply_markup)
        elif hasattr(update, 'callback_query') and update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.message.reply_text(welcome_back_msg, reply_markup=reply_markup)
        else:
            await update.effective_chat.send_message(welcome_back_msg, reply_markup=reply_markup)
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"Error in show_main_menu: {e}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        return ConversationHandler.END


async def handle_menu_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user's menu choice and create appropriate session"""
    try:
        user_choice = update.message.text
        tg_user_id = context.user_data.get("tg_user_id")
        
        if user_choice not in ROLE_MAP:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            return MAIN_MENU
        
        role_id = ROLE_MAP[user_choice]
        
        # Create session with selected role
        session = await create_session(tg_user_id, role_id)
        
        # Store session info
        context.user_data.update({
            "session_id": session.id,
            "role_id": role_id
        })
        
        # Route based on role
        return await route_by_role(update, context, role_id)
        
    except Exception as e:
        logger.error(f"Error in handle_menu_choice: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞.")
        return ConversationHandler.END


async def route_by_role(update: Update, context: ContextTypes.DEFAULT_TYPE, role_id: int):
    """Route user to appropriate flow based on selected role"""
    try:
        await update.message.reply_text("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...", reply_markup=ReplyKeyboardRemove())
        
        if role_id == 1:  # tenant - search for property
            keyboard = [[InlineKeyboardButton("üîç –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∂–∏–ª—å—è", callback_data="start_search")]]
            prompt = "üè° –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –Ω–∞–π—Ç–∏ –∞—Ä–µ–Ω–¥—É –≤ –°–æ—á–∏!"
            
        elif role_id == 2:  # owner - add property  
            keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="add_object")]]
            prompt = "üè† –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–¥–∞—Ç—å –≤–∞—à—É –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å!"
            
        elif role_id == 4:  # user bookings
            await select_renter_bookings(update, context)
            return VIEW_BOOKINGS  # or appropriate state
            
        elif role_id == 5:  # owner objects
            await select_owner_objects(update, context)  
            return VIEW_OBJECTS  # or appropriate state
            
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start")
            return ConversationHandler.END

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(prompt, reply_markup=reply_markup)
        
        return ConversationHandler.END

    except Exception as e:
        logger.error(f"Error in route_by_role: {e}")
        await update.message.reply_text("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
        return ConversationHandler.END
    
#==== –ü–æ–∫–∞–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –ª–µ–Ω–¥–ª–æ—Ä–¥—É ===
async def select_owner_objects (update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_user_id = update.effective_user.id
    async with get_async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –≤–ª–∞–¥–µ–ª—å—Ü–∞
        result_apts = await session.execute(
            select(Apartment).options(selectinload(Apartment.booking))
            .where(
                Apartment.owner_tg_id == tg_user_id,
                Apartment.is_active == True,
                Apartment.is_draft == False
    )
            .order_by(desc(Apartment.updated_at))
        )
        apartments = result_apts.scalars().all()

    if not apartments:
        await update.message.reply_text("üè¢ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.")
        return MAIN_MENU
    
    context.user_data["owner_objects"] = apartments
    await send_message(update, f"üîç–ù–∞–π–¥–µ–Ω–æ –≤–∞—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤: {len(apartments)}")

    await show_owner_objects(update,context)
    return VIEW_OBJECTS

async def show_owner_objects(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

    data = query.data if query else None
    print("üîÅ Callback –ø–æ–ª—É—á–µ–Ω:", data)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ user_data
    apts = context.user_data.get("owner_objects", [])
    if not apts:
        if query:
            await query.edit_message_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –ø—É—Å—Ç.")
        else:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –∫–≤–∞—Ä—Ç–∏—Ä –ø—É—Å—Ç.")
        return MAIN_MENU

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–¥–µ–∫—Å 0
    current_index = 0

    # –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    if data:
        if data.startswith("apt_next_") or data.startswith("apt_prev_"):
            try:
                current_index = int(data.split("_")[-1])
            except (ValueError, IndexError):
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return MAIN_MENU
        elif data.startswith("apt_delete_"):
            try:
                current_apartment = int(data.split("_")[-1])
                tg_user_id = update.effective_user.id
                return await delete_apartment(current_apartment, tg_user_id, update, context)
            except (ValueError, IndexError):
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return MAIN_MENU
        elif data.startswith("goto_"):
            return await select_owner_orders(update, context)
        elif data == "back_menu":
            await start (update, context)
            return 


    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    total = len(apts)
    current_index = max(0, min(current_index, total - 1))

    current_apartment = apts[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    text, markup = prepare_owner_objects_cards(current_apartment, current_index, total)

    if query:
        #await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        try:
            await query.edit_message_text(text, reply_markup=markup, parse_mode="HTML")
        except Exception as e:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
    else:
        await update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")

    return VIEW_OBJECTS    

#=======–ü—Ä–æ–≤–∞–ª–∏–≤–∞–µ–º—Å—è –≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –õ–µ–Ω–¥–ª–æ—Ä–¥–∞=======
async def select_owner_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    apartment_id = int(query.data.split("_")[-1])
    async with get_async_session() as session:
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –¥–∞–Ω–Ω–æ–º—É –æ–±—ä–µ–∫—Ç—É
        stmt = (
            select(Booking)
            .options(
                selectinload(Booking.apartment)
                .selectinload(Apartment.apartment_type),
                selectinload(Booking.apartment)
                .selectinload(Apartment.owner),
                selectinload(Booking.booking_type)
            )
            .where(Booking.apartment_id == apartment_id)
            .order_by(Booking.status_id.asc(),
                      Booking.total_price.desc())
        )
        result = await session.execute(stmt)
        owner_booking_full = result.scalars().all()


    if not owner_booking_full:
        await update.message.reply_text("üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return MAIN_MENU
    
    context.user_data["owner_bookings"] = owner_booking_full
    #await send_message(update, f"ID{apartment_id} üîç–Ω–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(owner_booking_full)}")

    await show_owner_orders(update,context)
    
    return VIEW_ORDERS

async def show_owner_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

    data = query.data if query else None
    print("üîÅ Callback –ø–æ–ª—É—á–µ–Ω:", data)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ user_data
    bookings = context.user_data.get("owner_bookings", [])
    if not bookings:
        if query:
            await query.edit_message_text("‚ùå –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.")
        else:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.")
        return MAIN_MENU
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–¥–µ–∫—Å 0
    current_index = 0

    # –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    if data:
        if data.startswith("owner_book_next_") or data.startswith("owner_book_prev_"):
            try:
                current_index = int(data.split("_")[-1])
            except (ValueError, IndexError):
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return MAIN_MENU
        elif data.startswith("back_to_objects"):
            await select_owner_objects (update,context)
            return VIEW_OBJECTS



    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    total = len(bookings)
    current_index = max(0, min(current_index, total - 1))

    current_booking = bookings[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    text, markup = prepare_owner_orders_cards(current_booking, current_index, total)

    if query:
        #await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        try:
            await query.edit_message_text(text, reply_markup=markup, parse_mode="HTML")
        except Exception as e:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
    else:
        await update.message.edit_text(text, reply_markup=markup, parse_mode="HTML")

    return VIEW_ORDERS   

#======–ø–æ–∫–∞–∑ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä—É=========
async def select_renter_bookings (update: Update, context: ContextTypes.DEFAULT_TYPE):
    ACTIVE_BOOKING_STATUSES = [5, 6]
    tg_user_id = update.effective_user.id
    async with get_async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
        stmt = (
            select(Booking)
            .options(
                selectinload(Booking.apartment)
                .selectinload(Apartment.apartment_type),
                selectinload(Booking.apartment)
                .selectinload(Apartment.owner),
                selectinload(Booking.booking_type)
            )
            .where((Booking.tg_user_id == tg_user_id)
                &(Booking.status_id.in_(ACTIVE_BOOKING_STATUSES)))
            .order_by(Booking.created_at.desc())
        )
        result = await session.execute(stmt)
        booking_full = result.scalars().all()


    if not booking_full:
        await update.message.reply_text("üè¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return MAIN_MENU
    
    context.user_data["renter_bookings"] = booking_full
    await send_message(update, f"üîç–ù–∞–π–¥–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {len(booking_full)}")

    await show_renter_bookings(update,context)
    return VIEW_BOOKINGS

async def show_renter_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if query:
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!

    data = query.data if query else None
    print("üîÅ Callback –ø–æ–ª—É—á–µ–Ω:", data)
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ user_data
    bookings = context.user_data.get("renter_bookings", [])
    if not bookings:
        if query:
            await query.edit_message_text("‚ùå –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.")
        else:
            await update.message.reply_text("‚ùå –°–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø—É—Å—Ç.")
        return MAIN_MENU

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–Ω–¥–µ–∫—Å 0
    current_index = 0

    # –ü–∞—Ä—Å–∏–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    if data:
        if data.startswith("book_next_") or data.startswith("book_prev_"):
            try:
                current_index = int(data.split("_")[-1])
            except (ValueError, IndexError):
                await query.message.reply_text("–û—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return MAIN_MENU


    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–æ–ø—É—Å—Ç–∏–º—ã–º –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
    total = len(bookings)
    current_index = max(0, min(current_index, total - 1))

    current_booking = bookings[current_index]

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É
    text, markup = prepare_renter_bookings_cards(current_booking, current_index, total)

    if query:
        #await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ!
        try:
            await query.edit_message_text(text, reply_markup=markup, parse_mode="HTML")
        except Exception as e:
            await query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏.")
    else:
        await update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")

    return VIEW_BOOKINGS   



# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===

async def send_message(update: Update, text: str):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ Message –∏ CallbackQuery)."""
    if update.message:
        await update.message.reply_text(text)
    elif update.callback_query:
        await update.callback_query.message.reply_text(text)     


async def delete_apartment(apartment_id: int, tg_user_id: int, update: Update, context: ContextTypes.DEFAULT_TYPE):
    ACTIVE_BOOKING_STATUSES = [5, 6]
    async with get_async_session() as session:
        # –ü–æ–ª—É—á–∞–µ–º –∫–≤–∞—Ä—Ç–∏—Ä—É —Å –±—É–∫–∏–Ω–≥–∞–º–∏
        result = await session.execute(
            select(Apartment)
            .options(selectinload(Apartment.booking))
            .where(Apartment.id == apartment_id)
        )
        apartment = result.scalar_one_or_none()

        if not apartment:
            await update.callback_query.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return VIEW_OBJECTS

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        has_active = any(b.status_id in ACTIVE_BOOKING_STATUSES for b in apartment.booking)

        if has_active:
            await update.callback_query.message.reply_text(
                "üö´ –ù–∞ –¥–∞–Ω–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. "
                "–°–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ. /help"
            )
            return 

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
        await session.execute(
            sa_update(Apartment)
            .where(Apartment.id == apartment_id)
            .values(
                is_active=False,
                updated_at=datetime.utcnow(),
                deleted_by=tg_user_id
            )
        )
        await session.commit()

        await update.callback_query.message.reply_text("‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")


        return VIEW_OBJECTS

# === –û—Ç–º–µ–Ω–∞ ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ /start",
        reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END