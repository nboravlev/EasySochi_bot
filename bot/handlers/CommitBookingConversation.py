from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from datetime import datetime

from db.db_async import get_async_session

from db.models.bookings import Booking
from db.models.apartments import Apartment
from db.models.booking_chat import BookingChat
from db.models.users import User

from bot.utils.escape import safe_html

from sqlalchemy import select, update as sa_update

from sqlalchemy.orm import selectinload

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    GO_TO_CHAT,
    BOOKING_CHAT
) = range(2)


# ‚úÖ 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
async def booking_confirm_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    booking_id = int(query.data.split(":")[-1])

    async with get_async_session() as session:
        result = await session.execute(
            select(Booking)
            .options(
                selectinload(Booking.user),
                selectinload(Booking.apartment).selectinload(Apartment.owner)
            )
            .where(Booking.id == booking_id)
        )
        booking = result.scalar_one_or_none()
        if not booking:
            await query.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        
        # ‚úÖ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É–∂–Ω—ã–µ ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context.user_data["booking_id"] = booking.id
        context.user_data["renter_id"] = booking.user.id
        context.user_data["owner_id"] = booking.apartment.owner.id
        context.user_data["renter_tg_id"] = booking.user.tg_user_id
        context.user_data["owner_tg_id"] = booking.apartment.owner.tg_user_id

        # ‚úÖ –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ (id=6)
        booking.status_id = 6
        await session.commit()

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç
    keyboard = [
        [InlineKeyboardButton("üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç", callback_data=f"chat_booking_{booking_id}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=booking.user.tg_user_id,
        text=(
            f"‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ{booking.id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n\n"
            f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–ø–ª–∞—Ç—ã "
            f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —á–∞—Ç –Ω–∏–∂–µ."
        ),
        reply_markup=reply_markup
    )

    # ‚úÖ –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
    await context.bot.send_message(
        chat_id=booking.apartment.owner.tg_user_id,
        text=(
            f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ññ{booking.id}.\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {booking.user.tg_user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,\n"
            f"–æ–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            f"–ü—Ä–æ–∏–Ω—Å—Ç—Ä—É–∫—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Å—Ç—è –æ —Å–ø–æ—Å–æ–±–∞—Ö –æ–ø–ª–∞—Ç—ã, –∞–ª–≥–æ—Ä–∏—Ç–º–µ –∑–∞—Å–µ–ª–µ–Ω–∏—è –∏ –ø—Ä–∞–≤–∏–ª–∞—Ö –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"
        )
    )

    await query.message.reply_text("‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ, —á–∞—Ç —Å–æ–∑–¥–∞–Ω.")
    return GO_TO_CHAT

# ‚úÖ 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç
async def open_booking_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    booking_id = int(query.data.split("_")[-1])
    context.user_data["chat_booking_id"] = booking_id

    await query.message.reply_text(
        f"üí¨ –í—ã –≤–æ—à–ª–∏ –≤ —á–∞—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è ‚Ññ{booking_id}.\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
    )
    return BOOKING_CHAT


# ‚úÖ 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
async def handle_booking_chat_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    booking_id = context.user_data.get("chat_booking_id")
    if not booking_id:
        return  # –Ω–µ –≤ —á–∞—Ç–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    user_tg_id = update.effective_user.id
    renter_id = context.user_data.get("renter_id")
    owner_id = context.user_data.get("owner_id")
    renter_tg_id = context.user_data.get("renter_tg_id")
    owner_tg_id = context.user_data.get("owner_tg_id")
    text = update.message.text

    async with get_async_session() as session:
        
        sender_id = renter_id if user_tg_id == renter_tg_id else owner_id
        print(f"DEBUG sender_id: {sender_id}")
        # üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î
        chat_msg = BookingChat(
            booking_id=booking_id,
            sender_id=sender_id,
            message_text=text[:255],
            created_at=datetime.utcnow()
        )
        session.add(chat_msg)
        await session.commit()

    # üì§ –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω–µ
    recipient_tg_id = owner_tg_id if sender_id == renter_id else renter_tg_id
    

    await context.bot.send_message(
        chat_id=recipient_tg_id,
        text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é ‚Ññ{booking_id}:\n{text}"
    )
