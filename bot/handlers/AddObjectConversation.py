from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from db.db_async import get_async_session
from db.models.apartment_types import ApartmentType
from db.models.apartments import Apartment
from db.models.images import Image
from utils.geocoding import autocomplete_address
from geoalchemy2.shape import from_shape
from shapely.geometry import Point
from bot.utils.user_session import register_user_and_session

from bot.utils.full_view_owner import render_apartment_card_full


# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    ADDRESS_INPUT,
    ADDRESS_SELECT,
    APARTMENT_TYPE_SELECTION,
    FLOOR,
    ELEVATOR,
    MAX_GUESTS,
    PETS,
    BALCONY,
    DESCRIPTION,
    PRICE,
    PHOTOS,
    CONFIRMATION
) = range(12)

# ‚¨áÔ∏è –°—Ç–∞—Ä—Ç
async def start_add_object(update: Update, context: ContextTypes.DEFAULT_TYPE):

    await update.message.reply_text(
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –æ–±—ä–µ–∫—Ç!\n–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å:"
    )
    return ADDRESS_INPUT

def shorten_address(label: str, keep_parts: int = 4) -> str:
    parts = label.split(", ")
    if len(parts) > keep_parts:
        return ", ".join(parts[-keep_parts:])
    return label

# ‚¨áÔ∏è –í—ã–±–æ—Ä –∏–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫
async def handle_address_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        index_str = query.data.replace("addr_", "")
        if index_str == "retry":
            await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–Ω–æ–≤–æ:")
            return ADDRESS_INPUT
        
        index = int(index_str)
        selected = context.user_data["addr_candidates"][index]

    except Exception as e:
        print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∞–¥—Ä–µ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ADDRESS_INPUT


    label = selected["label"]
    short_label = shorten_address(label)
    lat = selected["lat"]
    lon = selected["lon"]
    point = from_shape(Point(lon, lat), srid=4326)

    context.user_data["address"] = label
    context.user_data["address_short"] = short_label
    context.user_data["lat"] = lat
    context.user_data["lon"] = lon
    context.user_data["point"] = point

    print(f"[DEBUG] –í—ã–±—Ä–∞–Ω –∞–¥—Ä–µ—Å: {label} ({lat}, {lon})")
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
    async with get_async_session() as session:
        result = await session.execute(ApartmentType.__table__.select())
        types = result.fetchall()

        keyboard = [
            [InlineKeyboardButton(t.name, callback_data=str(t.id))] for t in types
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–ê–¥—Ä–µ—Å –≤—ã–±—Ä–∞–Ω: {label}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞:",
        reply_markup=reply_markup
    )
    return APARTMENT_TYPE_SELECTION  # üëà —Ç—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# ‚¨áÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∞–¥—Ä–µ—Å–∞. –ë–ª–æ–∫–∏ –º–µ—Å—Ç–∞–º–∏ –ø–µ—Ä–µ–ø—É—Ç–∞–Ω—ã –∫–∞–∫ –±—É–¥—Ç–æ.
async def handle_address_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text
    suggestions = await autocomplete_address(query)

    if not suggestions:
        await update.message.reply_text("–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return ADDRESS_INPUT
    
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–¥—Ä–µ—Å–∞
    for s in suggestions:
        s["short_label"] = shorten_address(s["label"])


    context.user_data["addr_candidates"] = suggestions

    keyboard = [
        [InlineKeyboardButton(s["short_label"], callback_data=f"addr_{i}")]
        for i, s in enumerate(suggestions)
    ]
    keyboard.append([InlineKeyboardButton("üîÅ –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ.", callback_data="addr_retry")])
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADDRESS_SELECT


# 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
async def handle_apartment_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        type_id = int(query.data.replace("type_", ""))
        context.user_data["type_id"] = type_id
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞: {e}")
        await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return APARTMENT_TYPE_SELECTION

    await query.message.reply_text("–≠—Ç–∞–∂:")
    return FLOOR

# ‚¨áÔ∏è –≠—Ç–∞–∂
async def handle_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        floor = int(update.message.text)
        if floor <= 0:
            raise ValueError
        context.user_data["floor"] = floor
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (>0):")
        return FLOOR

    await update.message.reply_text("–ú–∞–∫—Å–∏–º—É–º –≥–æ—Å—Ç–µ–π:")
    return MAX_GUESTS

# ‚¨áÔ∏è –ú–∞–∫—Å–∏–º—É–º –≥–æ—Å—Ç–µ–π
async def handle_maxguests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        max_guests = int(update.message.text)
        if max_guests <= 0:
            raise ValueError
        context.user_data["max_guests"] = max_guests
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑—É–º–Ω–æ–µ —á–∏—Å–ª–æ (>0):")
        return MAX_GUESTS

    reply = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –ª–∏—Ñ—Ç –≤ –¥–æ–º–µ?", reply_markup=reply)
    return ELEVATOR

# ‚¨áÔ∏è –õ–∏—Ñ—Ç ‚Üí –ñ–∏–≤–æ—Ç–Ω—ã–µ ‚Üí –ë–∞–ª–∫–æ–Ω
async def handle_elevator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["elevator"] = update.message.text.lower() == "–¥–∞"
    reply = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ú–æ–∂–Ω–æ –ª–∏ —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏?", reply_markup=reply)
    return PETS

async def handle_pets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["pets_allowed"] = update.message.text.lower() == "–¥–∞"
    reply = ReplyKeyboardMarkup([["–î–∞", "–ù–µ—Ç"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ï—Å—Ç—å –ª–∏ –±–∞–ª–∫–æ–Ω?", reply_markup=reply)
    return BALCONY

async def handle_balcony(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["balcony"] = update.message.text.lower() == "–¥–∞"
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞:", reply_markup=ReplyKeyboardRemove())
    return DESCRIPTION

# ‚¨áÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞
async def handle_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["description"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Å—É—Ç–∫–∏ –≤ —Ä—É–±–ª—è—Ö:")
    return PRICE

async def handle_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        price = int(update.message.text)
        if price <= 0 or price > 99999:
            raise ValueError
        context.user_data["price_per_day"] = price
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 99999:")
        return PRICE

    context.user_data["photos"] = []
    await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ –±–æ–ª–µ–µ 10. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ, –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'.")
    return PHOTOS

# ‚¨áÔ∏è –§–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file_id = photo.file_id

    context.user_data.setdefault("photos", []).append(file_id)

    print(f"[DEBUG] –î–æ–±–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {file_id}")
    print(f"[DEBUG] –í—Å–µ —Ñ–æ—Ç–æ: {context.user_data['photos']}")

    return PHOTOS

async def handle_photos_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"[DEBUG] context.user_data: {context.user_data}")
    user_id = context.user_data.get("user_id")
    
    if not user_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω user_id. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.")
        return ConversationHandler.END
    async with get_async_session() as session:
        apt = Apartment(
            address=context.user_data['address'],
            short_address = context.user_data['address_short'],
            coordinates = context.user_data["point"],
            type_id=context.user_data['type_id'],
            owner_id = user_id,
            floor=context.user_data['floor'],
            max_guests = context.user_data['max_guests'],
            has_elevator=context.user_data['elevator'],
            pets_allowed=context.user_data['pets_allowed'],
            has_balcony=context.user_data['balcony'],
            description=context.user_data['description'],
            price=context.user_data['price_per_day'],
        )
        session.add(apt)
        await session.flush()  # apt.id

        for file_id in context.user_data["photos"]:
            session.add(Image(apartment_id=apt.id, tg_file_id=file_id))

#        await session.commit()
        await session.flush()

        await session.refresh(apt, attribute_names=["apartment_type", "images"])


        text, media, markup = render_apartment_card_full(apt)

        if media:
            await update.message.reply_media_group(media)
        await update.message.reply_text(text, reply_markup=markup, parse_mode="HTML")

        await session.commit()
        #await update.message.reply_text("‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END
