from telegram import InlineKeyboardButton, InlineKeyboardMarkup

import calendar
from datetime import date, timedelta

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è callback
CB_PREFIX = "CAL"
CB_SELECT = f"{CB_PREFIX}_SELECT"
CB_NAV = f"{CB_PREFIX}_NAV"

def build_calendar(year: int, month: int, check_in=None, check_out=None):
    """–°—Ç—Ä–æ–∏—Ç inline-–∫–∞–ª–µ–Ω–¥–∞—Ä—å"""
    cal = calendar.Calendar(firstweekday=0)
    keyboard = []

    # –®–∞–ø–∫–∞ —Å –º–µ—Å—è—Ü–µ–º
    keyboard.append([InlineKeyboardButton(f"{calendar.month_name[month]} {year}", callback_data="IGNORE")])

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(d, callback_data="IGNORE") for d in week_days])

    # –°–µ—Ç–∫–∞ –¥–Ω–µ–π
    for week in cal.monthdatescalendar(year, month):
        row = []
        for day in week:
            if day.month != month:
                row.append(InlineKeyboardButton(" ", callback_data="IGNORE"))
            else:
                text = str(day.day)

                # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                if check_in and check_out and check_in <= day <= check_out:
                    text = f"‚úîÔ∏è{day.day}"
                elif check_in and day == check_in:
                    text = f"‚úîÔ∏è{day.day}"
                elif check_out and day == check_out:
                    text = f"üî¥{day.day}"

                row.append(InlineKeyboardButton(text, callback_data=f"{CB_SELECT}:{day.isoformat()}"))
        keyboard.append(row)

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    prev_month = (date(year, month, 1) - timedelta(days=1)).replace(day=1)
    next_month = (date(year, month, calendar.monthrange(year, month)[1]) + timedelta(days=1)).replace(day=1)
    keyboard.append([
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"{CB_NAV}:{prev_month.year}:{prev_month.month}"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"{CB_NAV}:{next_month.year}:{next_month.month}")
    ])

    return InlineKeyboardMarkup(keyboard)

def build_types_keyboard(types, selected):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤ 2 –∫–æ–ª–æ–Ω–∫–∏."""
    keyboard = []
    row = []
    for i, t in enumerate(types, start=1):
        mark = "üîò " if t["id"] in selected else "‚ö™Ô∏è "
        row.append(InlineKeyboardButton(f"{mark}{t['name']}", callback_data=f"type_{t['id']}"))
        if i % 2 == 0:  # –∫–∞–∂–¥—ã–µ 2 –∫–Ω–æ–ø–∫–∏ ‚Äî –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            keyboard.append(row)
            row = []
    if row:  # –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å –æ–¥–Ω–∞ "–ª–∏—à–Ω—è—è" –∫–Ω–æ–ø–∫–∞
        keyboard.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard.append([InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_types")])
    return keyboard

def build_price_filter_keyboard():
    return [
        [InlineKeyboardButton("0 ‚Äì 3000 ‚ÇΩ", callback_data="price_0_3000")],
        [InlineKeyboardButton("3000 ‚Äì 5900 ‚ÇΩ", callback_data="price_3000_5900")],
        [InlineKeyboardButton("6000+ ‚ÇΩ", callback_data="price_6000_plus")],
        [InlineKeyboardButton("üí∞ –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞", callback_data="price_all")]
    ]