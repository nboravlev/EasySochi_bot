from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove
)
from telegram.ext import (
    ConversationHandler,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters
)

from datetime import datetime

from db.db_async import get_async_session

from db.models.bookings import Booking
from db.models.apartments import Apartment
from db.models.booking_chat import BookingChat
from db.models.users import User

from sqlalchemy import select

async def booking_chat_message(current_booking: int,update: Update, context: ContextTypes.DEFAULT_TYPE):
    booking_id = current_booking
    if not booking_id:
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —á–∞—Ç–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    text = update.message.text
    user_tg_id = update.effective_user.id

    async with get_async_session() as session:
        # 1. –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        result = await session.execute(
            select(Booking).where(Booking.id == booking_id)
        )
        booking = result.scalar_one_or_none()
        if not booking:
            await update.message.reply_text("‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # 2. –ü–æ–ª—É—á–∞–µ–º –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞ (user_id -> tg_user_id)
        result = await session.execute(
            select(User).where(User.id == booking.user_id)
        )
        renter = result.scalar_one_or_none()
        if not renter:
            await update.message.reply_text("‚ùå –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        renter_id = renter.id
        renter_tg_id = renter.tg_user_id

        # 3. –ü–æ–ª—É—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–æ apartment.owner_id
        result = await session.execute(
            select(Apartment).where(Apartment.id == booking.apartment_id)
        )
        apartment = result.scalar_one_or_none()
        if not apartment:
            await update.message.reply_text("‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        owner_id = apartment.owner_id

        result = await session.execute(
            select(User).where(User.id == owner_id)
        )
        owner = result.scalar_one_or_none()
        if not owner:
            await update.message.reply_text("‚ùå –í–ª–∞–¥–µ–ª–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        owner_tg_id = owner.tg_user_id

        # 4. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_id = renter_id if user_tg_id == renter_tg_id else owner_id

        # 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        chat_msg = BookingChat(
            booking_id=booking_id,
            sender_id=sender_id,
            message_text=text[:255],
            created_at=datetime.utcnow()
        )
        session.add(chat_msg)
        await session.commit()

    # 6. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    recipient_tg_id = owner_tg_id if sender_id == renter_id else renter_tg_id

    # 7. –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=recipient_tg_id,
        text=f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é ‚Ññ{booking_id}:\n{text}"
    )
